name: Metrics Collection

on:
  workflow_dispatch:
  push:
  workflow_run:
    workflows: ["Java CI with Maven"]
    types: [completed]
    # branches: [archunit_tests]

jobs:
  collect-metrics:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'adopt'
          cache: maven

      - name: Get metadata
        id: meta
        run: |
          echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
          echo "time=$(date +'%H:%M:%S')" >> $GITHUB_OUTPUT
          echo "sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Run build and collect metrics
        id: metrics
        run: |
          start_time=$(date +%s)
          # Save build output to a file to extract test results later
          mvn --batch-mode --update-snapshots verify | tee build_output.log
          end_time=$(date +%s)
          build_time=$((end_time - start_time))
          echo "build_time=$build_time" >> $GITHUB_OUTPUT

          # Extract violation count
          violation_count=$(grep -A 1 "Running org.tzi.use.architecture.MavenLayeredArchitectureTest" build_output.log | tail -n 1 | tr -d ' ')
          echo "violation_count=$violation_count" >> $GITHUB_OUTPUT

      - name: Update CSV files
        run: |
          # Ensure docs dir exists
          mkdir -p docs
          
          # Build times CSV
          if [ ! -f "docs/build-times.csv" ]; then
            echo "date,time,commit,buildtime" > "docs/build-times.csv"
          fi
          echo "${{ steps.meta.outputs.date }},${{ steps.meta.outputs.time }},${{ steps.meta.outputs.sha }},${{ steps.metrics.outputs.build_time }}" >> "docs/build-times.csv"

          # Layer violations CSV  
          if [ ! -f "docs/layer-violations.csv" ]; then
            echo "date,time,commit,violations" > "docs/layer-violations.csv"
          fi
          echo "${{ steps.meta.outputs.date }},${{ steps.meta.outputs.time }},${{ steps.meta.outputs.sha }},${{ steps.metrics.outputs.violation_count }}" >> "docs/layer-violations.csv"

          # Cycles CSV (if JSON exists)
          if [ -f "use-core/cycles-tests-results.json" ]; then
            if [ ! -f "docs/cycles-tests.csv" ]; then
              echo "date,time,commit,all_modules_no_tests,all_modules_with_tests,analysis_no_tests,analysis_with_tests,api_no_tests,api_with_tests,config_no_tests,config_with_tests,gen_no_tests,gen_with_tests,graph_no_tests,graph_with_tests,main_no_tests,main_with_tests,parser_no_tests,parser_with_tests,uml_no_tests,uml_with_tests,util_no_tests,util_with_tests" > "docs/cycles-tests.csv"
            fi
            
            ALL_MODULES_NO_TESTS=$(jq -r '.without_tests.all_modules // 0' "use-core/cycles-tests-results.json")
            ALL_MODULES_WITH_TESTS=$(jq -r '.with_tests.all_modules // 0' "use-core/cycles-tests-results.json")
            ANALYSIS_NO_TESTS=$(jq -r '.without_tests.analysis // 0' "use-core/cycles-tests-results.json")
            ANALYSIS_WITH_TESTS=$(jq -r '.with_tests.analysis // 0' "use-core/cycles-tests-results.json")
            API_NO_TESTS=$(jq -r '.without_tests.api // 0' "use-core/cycles-tests-results.json")
            API_WITH_TESTS=$(jq -r '.with_tests.api // 0' "use-core/cycles-tests-results.json")
            CONFIG_NO_TESTS=$(jq -r '.without_tests.config // 0' "use-core/cycles-tests-results.json")
            CONFIG_WITH_TESTS=$(jq -r '.with_tests.config // 0' "use-core/cycles-tests-results.json")
            GEN_NO_TESTS=$(jq -r '.without_tests.gen // 0' "use-core/cycles-tests-results.json")
            GEN_WITH_TESTS=$(jq -r '.with_tests.gen // 0' "use-core/cycles-tests-results.json")
            GRAPH_NO_TESTS=$(jq -r '.without_tests.graph // 0' "use-core/cycles-tests-results.json")
            GRAPH_WITH_TESTS=$(jq -r '.with_tests.graph // 0' "use-core/cycles-tests-results.json")
            MAIN_NO_TESTS=$(jq -r '.without_tests.main // 0' "use-core/cycles-tests-results.json")
            MAIN_WITH_TESTS=$(jq -r '.with_tests.main // 0' "use-core/cycles-tests-results.json")
            PARSER_NO_TESTS=$(jq -r '.without_tests.parser // 0' "use-core/cycles-tests-results.json")
            PARSER_WITH_TESTS=$(jq -r '.with_tests.parser // 0' "use-core/cycles-tests-results.json")
            UML_NO_TESTS=$(jq -r '.without_tests.uml // 0' "use-core/cycles-tests-results.json")
            UML_WITH_TESTS=$(jq -r '.with_tests.uml // 0' "use-core/cycles-tests-results.json")
            UTIL_NO_TESTS=$(jq -r '.without_tests.util // 0' "use-core/cycles-tests-results.json")
            UTIL_WITH_TESTS=$(jq -r '.with_tests.util // 0' "use-core/cycles-tests-results.json")
            
            echo "${{ steps.meta.outputs.date }},${{ steps.meta.outputs.time }},${{ steps.meta.outputs.sha }},$ALL_MODULES_NO_TESTS,$ALL_MODULES_WITH_TESTS,$ANALYSIS_NO_TESTS,$ANALYSIS_WITH_TESTS,$API_NO_TESTS,$API_WITH_TESTS,$CONFIG_NO_TESTS,$CONFIG_WITH_TESTS,$GEN_NO_TESTS,$GEN_WITH_TESTS,$GRAPH_NO_TESTS,$GRAPH_WITH_TESTS,$MAIN_NO_TESTS,$MAIN_WITH_TESTS,$PARSER_NO_TESTS,$PARSER_WITH_TESTS,$UML_NO_TESTS,$UML_WITH_TESTS,$UTIL_NO_TESTS,$UTIL_WITH_TESTS" >> "docs/cycles-tests.csv"
          fi

      - name: Commit and push metrics
        run: |
          # Configure Git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Commit and push the updated CSV files
          git add docs/
          git commit -m "Update metrics data [skip ci]" || echo "No changes to commit"
          git push
