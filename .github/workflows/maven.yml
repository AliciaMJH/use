# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java CI with Maven

on:
  push:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # This ensures we get the full commit history

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'adopt'
          cache: maven

      - name: Get current date
        id: date
        run: echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT

      - name: Get current time
        id: time
        run: echo "time=$(date +'%H:%M:%S')" >> $GITHUB_OUTPUT

      - name: Get current commit
        id: commit
        run: echo "sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Build with Maven and measure time
        id: build
        run: |
          start_time=$(date +%s)
          mvn --batch-mode --update-snapshots verify
          end_time=$(date +%s)
          build_time=$((end_time - start_time))
          echo "build_time=$build_time" >> $GITHUB_OUTPUT

      - name: Update metrics data
        # if: github.ref == 'refs/heads/master'
        run: |
          # Ensure docs directory exists
          mkdir -p docs

          # Set file path
          BUILD_TIMES_CSV="docs/build-times.csv"
          CYCLES_CSV="docs/cycles-tests.csv"
          JSON_FILE="use-core/cycles-tests-results.json"

          # Update build times dat
          if [ ! -f "$BUILD_TIMES_CSV" ]; then
            echo "date,time,commit,buildtime" > "$BUILD_TIMES_CSV"
          fi

          # Debug outputs to see what values we're getting
          echo "Date: ${{ steps.date.outputs.date }}"
          echo "Time: ${{ steps.time.outputs.time }}"
          echo "Commit: ${{ steps.commit.outputs.sha }}"
          echo "Build time: ${{ steps.build.outputs.build_time }}"

          # Append the new build time data
          echo "${{ steps.date.outputs.date }},${{ steps.time.outputs.time }},${{ steps.commit.outputs.sha }},${{ steps.build.outputs.build_time }}" >> "$BUILD_TIMES_CSV"

          # Process cycle dependency results if JSON file exists
          if [ -f "$JSON_FILE" ]; then
            # Create CSV header if file doesn't exist
            if [ ! -f "$CYCLES_CSV" ]; then
              echo "date,time,commit,all_modules_no_tests,all_modules_with_tests,analysis_no_tests,analysis_with_tests,api_no_tests,api_with_tests,config_no_tests,config_with_tests,gen_no_tests,gen_with_tests,graph_no_tests,graph_with_tests,main_no_tests,main_with_tests,parser_no_tests,parser_with_tests,uml_no_tests,uml_with_tests,util_no_tests,util_with_tests" > "$CYCLES_CSV"
            fi

            # Extract values from JSON using jq
            ALL_MODULES_NO_TESTS=$(jq -r '.all_modules_no_tests // 0' "$JSON_FILE")
            ANALYSIS_NO_TESTS=$(jq -r '.analysis_no_tests // 0' "$JSON_FILE")
            API_NO_TESTS=$(jq -r '.api_no_tests // 0' "$JSON_FILE")
            CONFIG_NO_TESTS=$(jq -r '.config_no_tests // 0' "$JSON_FILE")
            GEN_NO_TESTS=$(jq -r '.gen_no_tests // 0' "$JSON_FILE")
            GRAPH_NO_TESTS=$(jq -r '.graph_no_tests // 0' "$JSON_FILE")
            MAIN_NO_TESTS=$(jq -r '.main_no_tests // 0' "$JSON_FILE")
            PARSER_NO_TESTS=$(jq -r '.parser_no_tests // 0' "$JSON_FILE")
            UML_NO_TESTS=$(jq -r '.uml_no_tests // 0' "$JSON_FILE")
            UTIL_NO_TESTS=$(jq -r '.util_no_tests // 0' "$JSON_FILE")

            # Append new row to CSV
            echo "${{ steps.date.outputs.date }},${{ steps.time.outputs.time }},${{ steps.commit.outputs.sha }},$ALL_MODULES_NO_TESTS,$ANALYSIS_NO_TESTS,$API_NO_TESTS,$CONFIG_NO_TESTS,$GEN_NO_TESTS,$GRAPH_NO_TESTS,$MAIN_NO_TESTS,$PARSER_NO_TESTS,$UML_NO_TESTS,$UTIL_NO_TESTS" >> "$CYCLES_CSV"

            echo "Updated cycle dependency data in $CYCLES_CSV"
          else
            echo "Warning: JSON file with cycle dependency results not found at $JSON_FILE"
          fi

          # Configure Git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Commit and push the updated CSV files
          git add docs/
          git commit -m "Update metrics data [skip ci]" || echo "No changes to commit"
          git push

      - name: Upload build result
        run: mkdir staging && cp use-assembly/target/*.zip staging

      - uses: actions/upload-artifact@v4
        with:
          name: Package
          path: staging
